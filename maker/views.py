from django.utils import feedgenerator
from django.http import HttpResponse, JsonResponse
from django.shortcuts import render

from .forms import FeedForm
from .utils import get_feed_items


def index(request):
    form = FeedForm()
    examples = [
        {
            "explanation": "The most read stories from Washington Post",
            "url": "https://www.washingtonpost.com/",
            "feed_title": "",
            "selector_item": 'div[data-link-group="most-read"] h2',
            "selector_title": "a",
            "selector_description": "",
            "selector_link": "a",
            "get_items_metadata": "on",
            "strip_url_params": "off",
        },
        {
            "explanation": "The most emailed stories from the New York Times",
            "url": "https://www.nytimes.com/trending/",
            "feed_title": "",
            "selector_item": ".css-jw2dfz li",
            "selector_title": "a",
            "selector_description": "",
            "selector_link": "a",
            "get_items_metadata": "off",
            "strip_url_params": "off",
        },
        {
            "explanation": "The most read stories from the Wall Street Journal",
            "url": "https://www.wsj.com/",
            "feed_title": "",
            "selector_item": "#most-popular-articles li",
            "selector_title": "a",
            "selector_description": "",
            "selector_link": "a",
            "get_items_metadata": "off",
            "strip_url_params": "off",
        },
        {
            "explanation": "Best of jazz articles on Bandcamp",
            "url": "https://daily.bandcamp.com/best-jazz",
            "feed_title": "",
            "selector_item": ".list-article",
            "selector_title": "a",
            "selector_description": "",
            "selector_link": "a",
            "get_items_metadata": "off",
            "strip_url_params": "off",
        },
        {
            "explanation": "Reckless Records",
            "url": "https://www.reckless.com/",
            "feed_title": "",
            "selector_item": "td.main .item",
            "selector_title": "tr",
            "selector_description": "table",
            "selector_link": "",
            "get_items_metadata": "off",
            "strip_url_params": "off",
        },
    ]
    absolute_url = request.build_absolute_uri()
    context = {"form": form, "examples": examples, "absolute_url": absolute_url}
    return render(request, "maker/index.html", context)


def feedView(request):
    # url and seleector_item are required
    url = request.GET.get("url")
    selector_item = request.GET.get("selector_item")

    # These are optional; pass as kwargs
    kwargs = {}
    kwargs["selector_title"] = request.GET.get("selector_title")
    kwargs["selector_description"] = request.GET.get("selector_description")
    kwargs["selector_link"] = request.GET.get("selector_link")
    kwargs["get_items_metadata"] = request.GET.get("get_items_metadata")
    kwargs["strip_url_params"] = request.GET.get("strip_url_params")

    title = request.GET.get("feed_title")
    if not title:
        title = f"Feed from {url}"

    feed_data = {
        "title": title,
        "link": request.build_absolute_uri(),
        "description": "Generated by feedmaker",
    }
    feed_items = get_feed_items(url, selector_item, **kwargs)

    if request.GET.get("format") == "json":
        return JsonResponse({**feed_data, "items": feed_items})
    else:
        feed = feedgenerator.Atom1Feed(**feed_data)

        for item in feed_items:
            feed.add_item(**item)

        return HttpResponse(feed.writeString("UTF-8"), content_type="application/xml")
